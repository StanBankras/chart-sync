{"version":3,"sources":["../server/server.js"],"names":["app","server","io","cors","origin","process","env","PORT","methods","rooms","port","use","express","json","static","path","join","rootRoutes","roomRoutes","on","socket","data","to","roomId","emit","username","listen","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ;AACA,IAAMC,MAAM,GAAG,wBAAaD,GAAb,CAAf;AACA,IAAME,EAAE,GAAG,qBAASD,MAAT,EAAiB;AAC1BE,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,6BAAsBC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAA1C,CADF;AAEJC,IAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR;AAFL;AADoB,CAAjB,CAAX;AAOO,IAAIC,KAAK,GAAG,EAAZ;;AACP,IAAMC,IAAI,GAAGL,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AAEAP,GAAG,CAACW,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAb,GAAG,CAACW,GAAJ,CAAQ,oBAAR;AACAX,GAAG,CAACW,GAAJ,CAAQC,iBAAQE,MAAR,CAAeC,cAAKC,IAAL,CAAU,IAAV,EAAgB,KAAhB,EAAuB,MAAvB,CAAf,CAAR;AACAhB,GAAG,CAACW,GAAJ,CAAQ,GAAR,EAAaM,cAAb;AACAjB,GAAG,CAACW,GAAJ,CAAQ,GAAR,EAAaO,aAAb;AAEAhB,EAAE,CAACiB,EAAH,CAAM,YAAN,EAAoBC,MAAM,IAAI;AAC5BA,EAAAA,MAAM,CAACD,EAAP,CAAU,eAAV,EAA2BE,IAAI,IAAI,+BAAanB,EAAb,EAAiBmB,IAAjB,CAAnC;AACAD,EAAAA,MAAM,CAACD,EAAP,CAAU,UAAV,EAAsBE,IAAI,IAAI,6BAAWnB,EAAX,EAAemB,IAAf,CAA9B;AACAD,EAAAA,MAAM,CAACD,EAAP,CAAU,WAAV,EAAuBE,IAAI,IAAInB,EAAE,CAACoB,EAAH,CAAMD,IAAI,CAACE,MAAX,EAAmBC,IAAnB,CAAwB,WAAxB,EAAqCH,IAArC,CAA/B;AACAD,EAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwBE,IAAI,IAAI,4BAAUnB,EAAV,EAAcmB,IAAd,CAAhC;AACAD,EAAAA,MAAM,CAACD,EAAP,CAAU,UAAV,EAAsBE,IAAI,IAAI,0BAAQnB,EAAR,EAAYmB,IAAZ,CAA9B;AACAD,EAAAA,MAAM,CAACD,EAAP,CAAU,MAAV,EAAkB;AAAA,QAAC;AAAEI,MAAAA,MAAF;AAAUE,MAAAA;AAAV,KAAD;AAAA,WAA0B,0BAASvB,EAAT,EAAakB,MAAb,EAAqBG,MAArB,EAA6BE,QAA7B,CAA1B;AAAA,GAAlB;AACAL,EAAAA,MAAM,CAACD,EAAP,CAAU,OAAV,EAAmBI,MAAM,IAAI,2BAAUrB,EAAV,EAAckB,MAAd,EAAsBG,MAAtB,CAA7B;AACAH,EAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,MAAM,kCAAiBjB,EAAjB,EAAqBkB,MAArB,CAA9B;AACD,CATD;AAWAnB,MAAM,CAACyB,MAAP,CAAchB,IAAd,EAAoB,MAAMiB,OAAO,CAACC,GAAR,wBAA4BlB,IAA5B,EAA1B","sourcesContent":["import express from 'express';\nimport path from 'path';\nimport { createServer } from 'http';\nimport cors from 'cors';\nimport socketio from 'socket.io';\nimport rootRoutes from './routes/index';\nimport roomRoutes from './routes/room';\nimport { changeTicker, deleteTool, movedItem, addItem } from './modules/chartevents';\nimport { joinRoom, leaveRoom, disconnectClient } from './modules/roomevents';\n\nconst app = express();\nconst server = createServer(app);\nconst io = socketio(server, {\n  cors: {\n    origin: `http://localhost:${process.env.PORT || '8080'}`,\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\nexport let rooms = {};\nconst port = process.env.PORT || 3000;\n\napp.use(express.json());\napp.use(cors());\napp.use(express.static(path.join('..', 'www', 'dist')));\napp.use('/', rootRoutes);\napp.use('/', roomRoutes);\n\nio.on('connection', socket => {\n  socket.on('change_ticker', data => changeTicker(io, data));\n  socket.on('del_item', data => deleteTool(io, data));\n  socket.on('move_item', data => io.to(data.roomId).emit('move_item', data));\n  socket.on('moved_item', data => movedItem(io, data));\n  socket.on('add_item', data => addItem(io, data));\n  socket.on('join', ({ roomId, username }) => joinRoom(io, socket, roomId, username));\n  socket.on('leave', roomId => leaveRoom(io, socket, roomId));\n  socket.on('disconnect', () => disconnectClient(io, socket));\n});\n\nserver.listen(port, () => console.log(`listening on ${port}`));"],"file":"server.js"}